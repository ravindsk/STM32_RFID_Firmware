
5_system_drivers-adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003f8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000590  08000598  00010598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000590  08000590  00010598  2**0
                  CONTENTS
  4 .ARM          00000000  08000590  08000590  00010598  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000590  08000598  00010598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000590  08000590  00010590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000594  08000594  00010594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000000  08000598  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000598  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010598  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001dfc  00000000  00000000  000105c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007c8  00000000  00000000  000123c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000158  00000000  00000000  00012b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000f0  00000000  00000000  00012ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f064  00000000  00000000  00012dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002334  00000000  00000000  00021e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053e5a  00000000  00000000  00024170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00077fca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000031c  00000000  00000000  00078020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000578 	.word	0x08000578

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000578 	.word	0x08000578

080001d8 <pa1_adc_init>:
#define CR2_CONT	 (1U<<1)
#define CR2_SWSTART	  (1U<<30)
#define SR_EOC		  (1U<<1)

void pa1_adc_init(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	/****Configure the ADC GPIO Pin**/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b14      	ldr	r3, [pc, #80]	; (8000230 <pa1_adc_init+0x58>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a13      	ldr	r2, [pc, #76]	; (8000230 <pa1_adc_init+0x58>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA1 mode to analog mode*/
	GPIOA->MODER |=(1U<<2);
 80001e8:	4b12      	ldr	r3, [pc, #72]	; (8000234 <pa1_adc_init+0x5c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a11      	ldr	r2, [pc, #68]	; (8000234 <pa1_adc_init+0x5c>)
 80001ee:	f043 0304 	orr.w	r3, r3, #4
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<3);
 80001f4:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <pa1_adc_init+0x5c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a0e      	ldr	r2, [pc, #56]	; (8000234 <pa1_adc_init+0x5c>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6013      	str	r3, [r2, #0]

	/****Configure the ADC Module**/
	/*Enable clock access to the ADC module*/
	RCC->APB2ENR |=ADC1EN;
 8000200:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <pa1_adc_init+0x58>)
 8000202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000204:	4a0a      	ldr	r2, [pc, #40]	; (8000230 <pa1_adc_init+0x58>)
 8000206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800020a:	6453      	str	r3, [r2, #68]	; 0x44

	/*Set conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <pa1_adc_init+0x60>)
 800020e:	2201      	movs	r2, #1
 8000210:	635a      	str	r2, [r3, #52]	; 0x34

	/*Set conversion sequence length*/
	ADC1->SQR1 = AD_SEQ_LEN_1;
 8000212:	4b09      	ldr	r3, [pc, #36]	; (8000238 <pa1_adc_init+0x60>)
 8000214:	2200      	movs	r2, #0
 8000216:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |=CR2_ADCON;
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <pa1_adc_init+0x60>)
 800021a:	689b      	ldr	r3, [r3, #8]
 800021c:	4a06      	ldr	r2, [pc, #24]	; (8000238 <pa1_adc_init+0x60>)
 800021e:	f043 0301 	orr.w	r3, r3, #1
 8000222:	6093      	str	r3, [r2, #8]

}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40023800 	.word	0x40023800
 8000234:	40020000 	.word	0x40020000
 8000238:	40012000 	.word	0x40012000

0800023c <start_conversion>:


void start_conversion(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	/*Enable continuous conversion*/
	ADC1->CR2 |=CR2_CONT;
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <start_conversion+0x28>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <start_conversion+0x28>)
 8000246:	f043 0302 	orr.w	r3, r3, #2
 800024a:	6093      	str	r3, [r2, #8]

	/*Start ADC conversion*/
	ADC1->CR2 |=CR2_SWSTART;
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <start_conversion+0x28>)
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <start_conversion+0x28>)
 8000252:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000256:	6093      	str	r3, [r2, #8]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40012000 	.word	0x40012000

08000268 <adc_read>:


uint32_t adc_read(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	/*Wait for conversion to be complete*/
	while(!(ADC1->SR & SR_EOC)){}
 800026c:	bf00      	nop
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <adc_read+0x20>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f003 0302 	and.w	r3, r3, #2
 8000276:	2b00      	cmp	r3, #0
 8000278:	d0f9      	beq.n	800026e <adc_read+0x6>

	/*Read converted value*/
	return (ADC1->DR);
 800027a:	4b03      	ldr	r3, [pc, #12]	; (8000288 <adc_read+0x20>)
 800027c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800027e:	4618      	mov	r0, r3
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	40012000 	.word	0x40012000

0800028c <led_init>:
#define LED_PIN		PIN5
#define PIN13		(1U<<13)
#define BTN_PIN		PIN13

void led_init(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000290:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <led_init+0x34>)
 8000292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000294:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <led_init+0x34>)
 8000296:	f043 0301 	orr.w	r3, r3, #1
 800029a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 mode to output mode*/
	GPIOA->MODER |=(1U<<10);
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <led_init+0x38>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a08      	ldr	r2, [pc, #32]	; (80002c4 <led_init+0x38>)
 80002a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002a6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <led_init+0x38>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a05      	ldr	r2, [pc, #20]	; (80002c4 <led_init+0x38>)
 80002ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002b2:	6013      	str	r3, [r2, #0]
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40023800 	.word	0x40023800
 80002c4:	40020000 	.word	0x40020000

080002c8 <button_init>:
	GPIOA->ODR &=~LED_PIN;

}

void button_init(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
	/*Enable clock access to PORTC*/
	RCC->AHB1ENR |=GPIOCEN;
 80002cc:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <button_init+0x34>)
 80002ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d0:	4a0a      	ldr	r2, [pc, #40]	; (80002fc <button_init+0x34>)
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PC13 as an input pin*/
	GPIOC->MODER &=~(1U<<26);
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <button_init+0x38>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a08      	ldr	r2, [pc, #32]	; (8000300 <button_init+0x38>)
 80002de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80002e2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <button_init+0x38>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a05      	ldr	r2, [pc, #20]	; (8000300 <button_init+0x38>)
 80002ea:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80002ee:	6013      	str	r3, [r2, #0]

}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40023800 	.word	0x40023800
 8000300:	40020800 	.word	0x40020800

08000304 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <fpu_enable+0x50>)
 800030a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800030e:	4a11      	ldr	r2, [pc, #68]	; (8000354 <fpu_enable+0x50>)
 8000310:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<21);
 8000318:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <fpu_enable+0x50>)
 800031a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800031e:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <fpu_enable+0x50>)
 8000320:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<22);
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <fpu_enable+0x50>)
 800032a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800032e:	4a09      	ldr	r2, [pc, #36]	; (8000354 <fpu_enable+0x50>)
 8000330:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<23);
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <fpu_enable+0x50>)
 800033a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800033e:	4a05      	ldr	r2, [pc, #20]	; (8000354 <fpu_enable+0x50>)
 8000340:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000344:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	e000ed00 	.word	0xe000ed00

08000358 <main>:
#define  LED_PIN		PIN5

bool btn_state;
uint32_t sensor_value;
int main()
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	/*Enable FPU*/
	fpu_enable();
 800035c:	f7ff ffd2 	bl	8000304 <fpu_enable>

	/*Initialize debug UART*/
	debug_uart_init();
 8000360:	f000 f84a 	bl	80003f8 <debug_uart_init>

	/*Initialize timebase*/
	timebase_init();
 8000364:	f000 f81e 	bl	80003a4 <timebase_init>

	/*Initialize LED*/
	led_init();
 8000368:	f7ff ff90 	bl	800028c <led_init>

	/*Initialize Push button*/
	button_init();
 800036c:	f7ff ffac 	bl	80002c8 <button_init>

	/*Initialize ADC*/
	pa1_adc_init();
 8000370:	f7ff ff32 	bl	80001d8 <pa1_adc_init>

	/*Start conversion*/
	start_conversion();
 8000374:	f7ff ff62 	bl	800023c <start_conversion>

	while(1)
	{

		sensor_value = adc_read();
 8000378:	f7ff ff76 	bl	8000268 <adc_read>
 800037c:	4603      	mov	r3, r0
 800037e:	4a01      	ldr	r2, [pc, #4]	; (8000384 <main+0x2c>)
 8000380:	6013      	str	r3, [r2, #0]
 8000382:	e7f9      	b.n	8000378 <main+0x20>
 8000384:	20000020 	.word	0x20000020

08000388 <tick_increment>:

	return g_curr_tick_p;

}
static void tick_increment(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <tick_increment+0x18>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	3301      	adds	r3, #1
 8000392:	4a03      	ldr	r2, [pc, #12]	; (80003a0 <tick_increment+0x18>)
 8000394:	6013      	str	r3, [r2, #0]
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	20000028 	.word	0x20000028

080003a4 <timebase_init>:
void timebase_init(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
}
 80003aa:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per second*/
	SysTick->LOAD =  ONE_SEC_LOAD - 1;
 80003ac:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <timebase_init+0x40>)
 80003ae:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <timebase_init+0x44>)
 80003b0:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 80003b2:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <timebase_init+0x40>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 80003b8:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <timebase_init+0x40>)
 80003ba:	2204      	movs	r2, #4
 80003bc:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 80003be:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <timebase_init+0x40>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a08      	ldr	r2, [pc, #32]	; (80003e4 <timebase_init+0x40>)
 80003c4:	f043 0302 	orr.w	r3, r3, #2
 80003c8:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 80003ca:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <timebase_init+0x40>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a05      	ldr	r2, [pc, #20]	; (80003e4 <timebase_init+0x40>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80003d6:	b662      	cpsie	i
}
 80003d8:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	e000e010 	.word	0xe000e010
 80003e8:	00f423ff 	.word	0x00f423ff

080003ec <SysTick_Handler>:

void SysTick_Handler(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	tick_increment();
 80003f0:	f7ff ffca 	bl	8000388 <tick_increment>
}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <debug_uart_init>:
	uart_write(ch);
	return ch;
}

void debug_uart_init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80003fc:	4b1f      	ldr	r3, [pc, #124]	; (800047c <debug_uart_init+0x84>)
 80003fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000400:	4a1e      	ldr	r2, [pc, #120]	; (800047c <debug_uart_init+0x84>)
 8000402:	f043 0301 	orr.w	r3, r3, #1
 8000406:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000408:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <debug_uart_init+0x88>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a1c      	ldr	r2, [pc, #112]	; (8000480 <debug_uart_init+0x88>)
 800040e:	f023 0310 	bic.w	r3, r3, #16
 8000412:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000414:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <debug_uart_init+0x88>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a19      	ldr	r2, [pc, #100]	; (8000480 <debug_uart_init+0x88>)
 800041a:	f043 0320 	orr.w	r3, r3, #32
 800041e:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8000420:	4b17      	ldr	r3, [pc, #92]	; (8000480 <debug_uart_init+0x88>)
 8000422:	6a1b      	ldr	r3, [r3, #32]
 8000424:	4a16      	ldr	r2, [pc, #88]	; (8000480 <debug_uart_init+0x88>)
 8000426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800042a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 800042c:	4b14      	ldr	r3, [pc, #80]	; (8000480 <debug_uart_init+0x88>)
 800042e:	6a1b      	ldr	r3, [r3, #32]
 8000430:	4a13      	ldr	r2, [pc, #76]	; (8000480 <debug_uart_init+0x88>)
 8000432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000436:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <debug_uart_init+0x88>)
 800043a:	6a1b      	ldr	r3, [r3, #32]
 800043c:	4a10      	ldr	r2, [pc, #64]	; (8000480 <debug_uart_init+0x88>)
 800043e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000442:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000444:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <debug_uart_init+0x88>)
 8000446:	6a1b      	ldr	r3, [r3, #32]
 8000448:	4a0d      	ldr	r2, [pc, #52]	; (8000480 <debug_uart_init+0x88>)
 800044a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800044e:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8000450:	4b0a      	ldr	r3, [pc, #40]	; (800047c <debug_uart_init+0x84>)
 8000452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000454:	4a09      	ldr	r2, [pc, #36]	; (800047c <debug_uart_init+0x84>)
 8000456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800045a:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 800045c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000460:	4808      	ldr	r0, [pc, #32]	; (8000484 <debug_uart_init+0x8c>)
 8000462:	f000 f827 	bl	80004b4 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 8000466:	4b08      	ldr	r3, [pc, #32]	; (8000488 <debug_uart_init+0x90>)
 8000468:	2208      	movs	r2, #8
 800046a:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <debug_uart_init+0x90>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	4a05      	ldr	r2, [pc, #20]	; (8000488 <debug_uart_init+0x90>)
 8000472:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000476:	60d3      	str	r3, [r2, #12]
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40023800 	.word	0x40023800
 8000480:	40020000 	.word	0x40020000
 8000484:	00f42400 	.word	0x00f42400
 8000488:	40004400 	.word	0x40004400

0800048c <compute_uart_bd>:

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
}
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	085a      	lsrs	r2, r3, #1
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	441a      	add	r2, r3
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80004a4:	b29b      	uxth	r3, r3
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
	...

080004b4 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 80004be:	6839      	ldr	r1, [r7, #0]
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f7ff ffe3 	bl	800048c <compute_uart_bd>
 80004c6:	4603      	mov	r3, r0
 80004c8:	461a      	mov	r2, r3
 80004ca:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <uart_set_baudrate+0x24>)
 80004cc:	609a      	str	r2, [r3, #8]
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40004400 	.word	0x40004400

080004dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004dc:	480d      	ldr	r0, [pc, #52]	; (8000514 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004de:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e4:	480c      	ldr	r0, [pc, #48]	; (8000518 <LoopForever+0x6>)
  ldr r1, =_edata
 80004e6:	490d      	ldr	r1, [pc, #52]	; (800051c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e8:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <LoopForever+0xe>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004fc:	4c0a      	ldr	r4, [pc, #40]	; (8000528 <LoopForever+0x16>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800050a:	f000 f811 	bl	8000530 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050e:	f7ff ff23 	bl	8000358 <main>

08000512 <LoopForever>:

LoopForever:
    b LoopForever
 8000512:	e7fe      	b.n	8000512 <LoopForever>
  ldr   r0, =_estack
 8000514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000520:	08000598 	.word	0x08000598
  ldr r2, =_sbss
 8000524:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000528:	2000002c 	.word	0x2000002c

0800052c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC_IRQHandler>
	...

08000530 <__libc_init_array>:
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	4d0d      	ldr	r5, [pc, #52]	; (8000568 <__libc_init_array+0x38>)
 8000534:	4c0d      	ldr	r4, [pc, #52]	; (800056c <__libc_init_array+0x3c>)
 8000536:	1b64      	subs	r4, r4, r5
 8000538:	10a4      	asrs	r4, r4, #2
 800053a:	2600      	movs	r6, #0
 800053c:	42a6      	cmp	r6, r4
 800053e:	d109      	bne.n	8000554 <__libc_init_array+0x24>
 8000540:	4d0b      	ldr	r5, [pc, #44]	; (8000570 <__libc_init_array+0x40>)
 8000542:	4c0c      	ldr	r4, [pc, #48]	; (8000574 <__libc_init_array+0x44>)
 8000544:	f000 f818 	bl	8000578 <_init>
 8000548:	1b64      	subs	r4, r4, r5
 800054a:	10a4      	asrs	r4, r4, #2
 800054c:	2600      	movs	r6, #0
 800054e:	42a6      	cmp	r6, r4
 8000550:	d105      	bne.n	800055e <__libc_init_array+0x2e>
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	f855 3b04 	ldr.w	r3, [r5], #4
 8000558:	4798      	blx	r3
 800055a:	3601      	adds	r6, #1
 800055c:	e7ee      	b.n	800053c <__libc_init_array+0xc>
 800055e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000562:	4798      	blx	r3
 8000564:	3601      	adds	r6, #1
 8000566:	e7f2      	b.n	800054e <__libc_init_array+0x1e>
 8000568:	08000590 	.word	0x08000590
 800056c:	08000590 	.word	0x08000590
 8000570:	08000590 	.word	0x08000590
 8000574:	08000594 	.word	0x08000594

08000578 <_init>:
 8000578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057a:	bf00      	nop
 800057c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057e:	bc08      	pop	{r3}
 8000580:	469e      	mov	lr, r3
 8000582:	4770      	bx	lr

08000584 <_fini>:
 8000584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000586:	bf00      	nop
 8000588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058a:	bc08      	pop	{r3}
 800058c:	469e      	mov	lr, r3
 800058e:	4770      	bx	lr
